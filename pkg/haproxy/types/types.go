/*
Copyright 2019 The HAProxy Ingress Controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package types

// Frontend ...
//
// Wildcard `*` hostname is a catch all and will be used if no other hostname,
// alias or regex matches the request. If wildcard hostname is not declared,
// the default backend will be used. If the default backend is empty,
// a default 404 page generated by HAProxy will be used.
type Frontend struct {
	Hostname               string
	Paths                  []*FrontendPath
	RootRedirect           string
	Alias                  FrontendAliasConfig
	HTTPPassthroughBackend *Backend
	SSLPassthrough         bool
	Timeout                FrontendTimeoutConfig
	TLS                    FrontendTLSConfig
}

// FrontendPath ...
//
// Root context `/` path is a catch all and will be used if no other path
// matches the request on this frontend. If a root context path is not
// declared, the default backend will be used. If the default backend is
// empty, a default 404 page generated by HAProxy will be used.
type FrontendPath struct {
	Path      string
	Backend   Backend
	BackendID string
}

// FrontendAliasConfig ...
type FrontendAliasConfig struct {
	AliasName  string
	AliasRegex string
}

// FrontendTimeoutConfig ...
type FrontendTimeoutConfig struct {
	Client    string
	ClientFin string
}

// FrontendTLSConfig ...
type FrontendTLSConfig struct {
	TLSFilename      string
	TLSFileSHA256Sum string
	CAFilename       string
	CAFileSHA256Sum  string
	AddCertHeader    bool
	ErrorPage        string
}

// Backend ...
type Backend struct {
	ID               string
	Namespace        string
	Name             string
	Port             int
	Endpoints        []*Endpoint
	BalanceAlgorithm string
	Cookie           Cookie
	MaxconnServer    int
	ModeTCP          bool
	ProxyBodySize    string
	SSLRedirect      bool
	HTTPRequests     []*HTTPRequest
}

// Endpoint ...
type Endpoint struct {
	IP     string
	Port   int
	Weight int
	Target string
}

// Cookie ...
type Cookie struct {
	Name     string
	Strategy string
	Key      string
}

// HTTPRequest ...
type HTTPRequest struct {
}

// Userlist ...
type Userlist struct {
	Name  string
	Users []User
}

// User ...
type User struct {
	Name      string
	Passwd    string
	Encrypted bool
}
